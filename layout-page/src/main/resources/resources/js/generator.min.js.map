{"version":3,"sources":["forms-generic-errors.js","js/generator.js","js/directives/pbDatepickerUtc.js","js/directives/pbModel.js","js/directives/pbPropertyValues.js","js/services/bindingContextFactory.js","js/services/bindingsFactory.js","js/services/modelFactory.js","js/services/widgetNameFactory.js"],"names":[],"mappings":"CAAA,SAAA,GACA,IACA,EAAA,QAAA,OAAA,0BACA,MAAA,GACA,EAAA,QAAA,OAAA,6BAEA,EAAA,KAAA,iBAAA,SAAA,GACA,EAAA,IAAA,4BACA,uiBCRA,WACA,YAEA,SAAA,OAAA,6BACA,QAAA,OAAA,4BACA,QAAA,OAAA,8BACA,QAAA,OAAA,iBAEA,QAAA,OAAA,gBACA,aACA,aACA,WACA,yBACA,yBACA,wBACA,0BACA,kBChBA,WACA,YAEA,SAAA,OAAA,2BACA,UAAA,mBAAA,SAAA,UAAA,SAAA,EAAA,GACA,QAAA,GAAA,EAAA,EAAA,EAAA,GAEA,EAAA,SAAA,KAAA,SAAA,GAOA,MANA,SAAA,OAAA,KAEA,EAAA,WAAA,EAAA,aAAA,EAAA,qBAEA,EAAA,YAAA,EAAA,EAAA,EAAA,IAEA,IAIA,EAAA,YAAA,KAAA,SAAA,GACA,GAAA,EAAA,GAAA,CACA,GAAA,GAAA,GAAA,MAAA,EAGA,OAFA,GAAA,YAAA,EAAA,EAAA,EAAA,GACA,EAAA,cAAA,GACA,EAAA,QAAA,EAAA,EAAA,iBAEA,MAAA,GAAA,QAAA,EAAA,EAAA,mBAKA,QAAA,GAAA,GACA,GAAA,GAAA,OAAA,EACA,OAAA,MAAA,MAAA,KAAA,EAGA,OACA,SAAA,IACA,QAAA,UACA,KAAA,SCtCA,WACA,YAEA,SAAA,OAAA,2BACA,UAAA,WAAA,SAAA,eAAA,kBAAA,mBAAA,yBAAA,wBAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,QAAA,MASA,QAAA,GAAA,EAAA,GACA,OACA,IAAA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,KAAA,EAAA,IAAA,EAAA,SACA,IAAA,GAAA,EAAA,IAAA,EAAA,kBACA,IAAA,EAAA,QAAA,aACA,EAAA,OACA,EACA,EAAA,OAAA,EAAA,QAAA,YAAA,GACA,EAAA,cAMA,MAvBA,GAAA,UAAA,KAAA,SAAA,GACA,GAAA,GAAA,EAAA,OAAA,EACA,MAAA,cAAA,EAAA,cACA,KAAA,SAAA,WACA,MAAA,MAoBA,SAAA,IACA,WAAA,EAIA,aAAA,cAEA,OAAA,EACA,QAAA,SCvCA,WACA,YAEA,SAAA,OAAA,2BACA,UAAA,oBAAA,SAAA,kBAAA,wBAAA,wBAAA,SAAA,EAAA,EAAA,EAAA,GAEA,QAAA,GAAA,EAAA,GACA,OACA,IAAA,SAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,EAAA,IAAA,EAAA,iBACA,GAAA,OACA,EACA,EAAA,OAAA,EAAA,GACA,EAAA,eACA,EAAA,WAAA,QAAA,SAAA,GACA,SAAA,EAAA,IAAA,SAAA,EAAA,GAAA,SAMA,OACA,SAAA,IACA,OAAA,EACA,QAAA,WACA,QAAA,SCzBA,WACA,YAEA,SAAA,KAEA,QAAA,GAAA,GACA,OACA,OAAA,SAAA,EAAA,GAGA,MAFA,GAAA,YAAA,EACA,OAAA,eAAA,EAAA,EAAA,GACA,OAKA,QAAA,GAAA,EAAA,GACA,GAAA,GAAA,EAAA,eA0BA,OAxBA,GAAA,GAEA,KAAA,SACA,IAAA,WACA,MAAA,GAAA,OAEA,IAAA,SAAA,GACA,EAAA,cACA,EAAA,YAAA,EAAA,QAAA,MAKA,KAAA,UACA,IAAA,WACA,MAAA,GAAA,UAIA,KAAA,SACA,IAAA,WACA,MAAA,GAAA,SAGA,EAGA,OACA,OAAA,GAIA,QACA,OAAA,yBACA,QAAA,wBAAA,MCpDA,WACA,YAUA,SAAA,GAAA,EAAA,EAAA,GAUA,QAAA,GAAA,EAAA,EAAA,GAQA,QAAA,GAAA,GACA,GAAA,GAAA,EAAA,EACA,QACA,IAAA,WACA,MAAA,GAAA,IAEA,IAAA,SAAA,GACA,EAAA,OAAA,EAAA,IAEA,YAAA,GAWA,QAAA,GAAA,EAAA,GACA,OACA,IAAA,WACA,MAAA,SAAA,SAAA,GAAA,EAAA,OAAA,IAAA,GAAA,GAEA,IAAA,WACA,EAAA,KAAA,IAAA,EAAA,8EAEA,YAAA,GAIA,GAAA,IAEA,KAAA,EAGA,SAAA,EAGA,QAAA,KAAA,GAAA,QAAA,SAAA,GACA,GAAA,GAAA,EAAA,EACA,QAAA,eAAA,EAAA,EAAA,EAAA,EAAA,MAAA,EAAA,MAAA,MAIA,OACA,OAAA,GAGA,EAAA,SAAA,eAAA,SAAA,QAEA,QAAA,OAAA,yBACA,QAAA,kBAAA,MClFA,WACA,YAEA,SAAA,GAAA,EAAA,EAAA,EAAA,GAEA,QAAA,GAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,OAAA,OAGA,QAAA,GAAA,EAAA,EAAA,GACA,EAAA,GAAA,KAAA,MAAA,EAAA,OAGA,QAAA,GAAA,EAAA,EAAA,GAGA,GAAA,GAAA,EAAA,GAAA,UAAA,QAAA,gBAAA,EAAA,MAEA,QAAA,eAAA,EAAA,GACA,IAAA,WACA,IACA,GAAA,GAAA,EAAA,EAIA,OAHA,SAAA,OAAA,EAAA,KACA,EAAA,GAEA,EACA,MAAA,GACA,EAAA,KAAA,qBAAA,EAAA,WAAA,EAAA,WAGA,YAAA,IAIA,QAAA,GAAA,EAAA,EAAA,GAEA,GACA,GADA,EAAA,IAGA,QAAA,eAAA,EAAA,GACA,IAAA,WACA,GAAA,GAAA,EAAA,EAAA,OAAA,EAAA,MAAA,GAAA,EAQA,OANA,KAAA,GAAA,SAAA,IACA,EAAA,EACA,EAAA,IAAA,GAAA,QAAA,SAAA,GACA,EAAA,KAGA,GAEA,YAAA,IAIA,QAAA,GAAA,EAAA,EAAA,GACA,QAAA,GAAA,EAAA,GACA,MAAA,WAAA,EAAA,QAAA,GAAA,QAAA,eAAA,UAAA,GAAA,QAAA,YAAA,QAAA,uBAAA,KAAA,OAGA,OAAA,eAAA,EAAA,GACA,IAAA,WACA,MAAA,GAAA,EAAA,OAAA,GAAA,EAAA,WAEA,YAAA,IAIA,GAAA,IACA,SAAA,EACA,SAAA,EACA,KAAA,EACA,WAAA,EACA,IAAA,EACA,aAAA,EAGA,QACA,OAAA,SAAA,GAEA,GAAA,GAAA,OAAA,KAAA,GAAA,OAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,EAEA,OADA,GAAA,EAAA,MAAA,EAAA,EAAA,GACA,MAkBA,OAfA,GAAA,cAAA,WACA,GAAA,KAYA,OAXA,QAAA,KAAA,GAAA,QAAA,SAAA,GACA,OAAA,eAAA,EAAA,GACA,IAAA,WACA,MAAA,GAAA,IAEA,IAAA,SAAA,GACA,EAAA,GAAA,GAEA,YAAA,MAGA,GAEA,IAIA,EAAA,SAAA,eAAA,QAAA,OAAA,aAEA,QAAA,OAAA,yBACA,QAAA,eAAA,MC5GA,WACA,YAEA,SAAA,KAQA,QAAA,GAAA,GAOA,MANA,GAAA,eAAA,KACA,EAAA,GAAA,IAGA,EAAA,IAAA,EAEA,EAAA,EAAA,GAdA,GAAA,KAEA,QACA,QAAA,GAcA,QAAA,OAAA,yBACA,QAAA,oBAAA","file":"generator.min.js","sourcesContent":["(function(module) {\ntry {\n  module = angular.module('pb.generator.templates');\n} catch (e) {\n  module = angular.module('pb.generator.templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('forms-generic-errors.html',\n    '<div class=\"text-danger\" ng-message=\"required\" translate>This field is required</div>\\n' +\n    '<div class=\"text-danger\" ng-message=\"minlength\" translate>This field length should be larger</div>\\n' +\n    '<div class=\"text-danger\" ng-message=\"maxlength\" translate>This field length should be smaller</div>\\n' +\n    '<div class=\"text-danger\" ng-message=\"min\" translate>This value is too small</div>\\n' +\n    '<div class=\"text-danger\" ng-message=\"max\" translate>This value is too large</div>\\n' +\n    '<div class=\"text-danger\" ng-message=\"email\" translate>This is not a valid email</div>\\n' +\n    '');\n}]);\n})();\n","(function() {\n  'use strict';\n\n  angular.module('pb.generator.constants', []);\n  angular.module('pb.generator.services', []);\n  angular.module('pb.generator.directives', []);\n  angular.module('pb.widgets', []);\n\n  angular.module('pb.generator', [\n    'ngSanitize',\n    'ngMessages',\n    'ngUpload',\n    'pb.generator.templates',\n    'pb.generator.constants',\n    'pb.generator.services',\n    'pb.generator.directives',\n    'pb.widgets'\n  ]);\n})();\n\n","(function () {\n  'use strict';\n\n  angular.module('pb.generator.directives')\n    .directive('pbDatepickerUtc', ['$parse', '$filter', function ($parse, $filter) {\n      function datepickerUtcLink(scope, element, attr, ngModelController) {\n          // called with a JavaScript Date object when picked from the datepicker\n          ngModelController.$parsers.push(function (viewValue) {\n            if (angular.isDate(viewValue)) {\n              // fix utc\n              viewValue.setMinutes(viewValue.getMinutes() - viewValue.getTimezoneOffset());\n              // reset hours, min, sec...\n              viewValue.setUTCHours(0,0,0,0);\n            }\n            return viewValue;\n          });\n\n          // called with a 'yyyy-mm-dd' string to format\n          ngModelController.$formatters.push(function (modelValue) {\n            if (needDateConversion(modelValue)) {\n              var date = new Date(modelValue);\n              date.setUTCHours(0,0,0,0);\n              ngModelController.$setViewValue(date);\n              return $filter('date')( date , attr.datepickerPopup);\n            }\n            return $filter('date')( modelValue , attr.datepickerPopup);\n          });\n\n      }\n\n      function needDateConversion(value) {\n        var val = Number(value);\n        return Math.floor(val) === val;\n      }\n\n      return  {\n          restrict: 'A',\n          require:  'ngModel',\n          link: datepickerUtcLink\n      };\n\n    }]);\n})();\n","(function () {\n  'use strict';\n\n  angular.module('pb.generator.directives')\n    .directive('pbModel', ['$parse', 'modelFactory', 'bindingsFactory', 'dataModelFactory', 'modelPropertiesFactory', 'bindingContextFactory', function ($parse, modelFactory, bindingsFactory, dataModelFactory, modelPropertiesFactory, bindingContextFactory) {\n\n      function PbModelCtrl() {}\n      PbModelCtrl.prototype.fill = function (rawData) {\n        var model = modelFactory.create(rawData);\n        this.createGateway = model.createGateway;\n        this.getModel = function() {\n          return model;\n        };\n      };\n\n      function pbModelCompile(tElement, tAttributes) {\n        return {\n          pre: function (scope, element, attrs, pbModelCtrl) {\n            pbModelCtrl.fill(dataModelFactory.get(tAttributes.pbModel));\n            var pbModelProperties = modelPropertiesFactory.get(tAttributes.pbModelProperties);\n            if(pbModelProperties && scope.$parent.pbModelCtrl) {\n              bindingsFactory.create(\n                pbModelProperties,\n                bindingContextFactory.create(scope.$parent.pbModelCtrl, scope),\n                pbModelCtrl.getModel());\n            }\n          }\n        }\n      }\n\n      return {\n        restrict: 'A',\n        controller: PbModelCtrl,\n        // Expose controller to the scope to mask parent one.\n        // Every time a model is created then it mask its parent\n        // model allowing nested model\n        controllerAs: 'pbModelCtrl',\n        // This is why we use a new scope. To avoid overriding parent modelCtrl.\n        scope: true,\n        compile: pbModelCompile\n      }\n    }]);\n})();\n","(function () {\n  'use strict';\n\n  angular.module('pb.generator.directives')\n    .directive('pbPropertyValues', ['$parse', 'bindingsFactory', 'propertyValuesFactory', 'bindingContextFactory', function ($parse, bindingsFactory, propertyValuesFactory, bindingContextFactory) {\n\n      function pbPropertyValuesCompile(tElement, tAttributes) {\n        return {\n          pre: function ($scope, elem, attr, pbModelCtrl) {\n            var pbPropertyValues = propertyValuesFactory.get(tAttributes.pbPropertyValues);\n            bindingsFactory.create(\n              pbPropertyValues,\n              bindingContextFactory.create(pbModelCtrl, $scope),\n              $scope.properties = {});\n            $scope.properties.isBound = function (property) {\n              return !!(pbPropertyValues[property] && pbPropertyValues[property].type === 'data');\n            }\n          }\n        };\n      }\n\n      return {\n        restrict: 'A',\n        scope: true,\n        require: '^pbModel',\n        compile: pbPropertyValuesCompile\n      };\n    }]);\n})();\n","(function () {\n  'use strict';\n\n  function bindingContextFactory() {\n\n    function expand(context) {\n      return {\n        \"with\": function (name, accessors) {\n          accessors.enumerable = true;\n          Object.defineProperty(context, name, accessors);\n          return this;\n        }\n      };\n    }\n\n    function createContext(modelCtrl, scope) {\n      var context = modelCtrl.createGateway();\n\n      expand(context)\n\n        .with('$item', {\n          get: function () {\n            return scope.$item;\n          },\n          set: function (value) {\n            if (scope.$collection) {\n              scope.$collection[scope.$index] = value;\n            }\n          }\n        })\n\n        .with('$index', {\n          get: function () {\n            return scope.$index;\n          }\n        })\n\n        .with('$form', {\n          get: function () {\n            return scope.$form;\n          }\n        });\n      return context;\n    }\n\n    return {\n      create: createContext\n    }\n  }\n\n  angular\n    .module('pb.generator.services')\n    .factory('bindingContextFactory', bindingContextFactory);\n})();\n","(function () {\n  'use strict';\n\n  /**\n   * Factory to create bindings associating properties (also known as properties) to the model.\n   *\n   * @param $interpolate\n   * @param $parse\n   * @param $log\n   * @returns {{create: createBindings}}\n   */\n  function bindingsFactory($interpolate, $parse, $log) {\n\n    /**\n     * Define destination properties allowing to\n     * access the context object as described in properties.\n     *\n     * @param properties - also known as properties. { type: <data | constant>, value: <expression> }\n     * @param context - against which property.value expression will be executed.\n     * @param destination - object where to bind the resulting properties.\n     */\n    function createBindings(properties, context, destination) {\n\n      /**\n       * Allow accessing a data in a two way data binding matter.\n       *\n       * @param property\n       * @returns {{get: Function, set: Function, enumerable: boolean}}\n       */\n      function createDataAccessors(property) {\n        var getter = $parse(property);\n        return {\n          get: function () {\n            return getter(context);\n          },\n          set: function (value) {\n            getter.assign(context, value);\n          },\n          enumerable: true\n        }\n      }\n\n      /**\n       * Allow accessing a constant using angular interpolation feature. Update the value back is not allowed.\n       *\n       * @param value\n       * @param name\n       * @returns {{get: Function, set: Function, enumerable: boolean}}\n       */\n      function createConstantAccessors(value, name) {\n        return {\n          get: function () {\n            return angular.isString(value) ? $interpolate(String(value))(context) : value;\n          },\n          set: function () {\n            $log.warn('<', name, '> is a constant therefor it can\\'t be updated. Please bind a data instead.');\n          },\n          enumerable: true\n        }\n      }\n\n      var propertyAccessors = {\n        // We need two way data binding here.\n        'data': createDataAccessors,\n        // All constants are expressions candidate for interpolation.\n        // This is one way expression. We can't set an expression value back.\n        'constant': createConstantAccessors\n      };\n\n      Object.keys(properties).forEach(function (name) {\n        var property = properties[name];\n        Object.defineProperty(destination, name, propertyAccessors[property.type](property.value, name));\n      });\n    }\n\n    return {\n      create: createBindings\n    }\n  }\n  bindingsFactory.$inject = ['$interpolate', '$parse', '$log'];\n\n  angular.module('pb.generator.services')\n    .factory('bindingsFactory', bindingsFactory);\n})();\n","(function () {\n  'use strict';\n\n  function modelFactory($interpolate, $http, $log, $location) {\n\n    function resolveVariable(dataModel, descriptor, name) {\n      dataModel[name] = descriptor.value || undefined;\n    }\n\n    function resolveJson(dataModel, descriptor, name) {\n      dataModel[name] = JSON.parse(descriptor.value);\n    }\n\n    function resolveExpression(dataModel, descriptor, name) {\n\n      // use strict. Avoid pollution of the global object.\n      var expression = new Function('$data', '\"use strict\";' + descriptor.value), currentValue;\n\n      Object.defineProperty(dataModel, name, {\n        get: function () {\n          try {\n            var value = expression(dataModel);\n            if(!angular.equals(currentValue, value)) {\n              currentValue = value;\n            }\n            return currentValue;\n          } catch (e) {\n            $log.warn(\"Error evaluating <\", name, \"> data: \", e.message);\n          }\n        },\n        enumerable: true\n      });\n    }\n\n    function resolveUrl(dataModel, descriptor, name) {\n\n      var url = null;\n      var value;\n\n      Object.defineProperty(dataModel, name, {\n        get: function () {\n          var currentUrl = $interpolate(descriptor.value, false, null, true)(dataModel);\n\n          if (currentUrl !== url && currentUrl !== undefined) {\n            url = currentUrl;\n            $http.get(url).success(function (data) {\n              value = data;\n            });\n          }\n          return value;\n        },\n        enumerable: true\n      });\n    }\n\n    function resolveUrlParameter(dataModel, descriptor, name) {\n      function extractUrlParameter(param, str) {\n        return decodeURI(str.replace(new RegExp(\"^(?:.*[&\\\\?]\" + encodeURI(param).replace(/[\\.\\+\\*]/g, \"\\\\$&\") + \"(?:\\\\=([^&]*))?)?.*$\", \"i\"), \"$1\"));\n      }\n\n      Object.defineProperty(dataModel, name, {\n        get: function () {\n          return extractUrlParameter(descriptor.value || '', $location.absUrl());\n        },\n        enumerable: true\n      });\n    }\n\n    var resolveMap = {\n      variable: resolveVariable,\n      constant: resolveVariable,\n      json: resolveJson,\n      expression: resolveExpression,\n      url: resolveUrl,\n      urlparameter: resolveUrlParameter\n    };\n\n    return {\n      create: function (data) {\n\n        var model = Object.keys(data).reduce(function(acc, name) {\n          var descriptor = data[name];\n          resolveMap[descriptor.type](acc, descriptor, name);\n          return acc;\n        }, {});\n\n        model.createGateway = function () {\n          var context = {};\n          Object.keys(model).forEach(function (property) {\n            Object.defineProperty(context, property, {\n              get: function () {\n                return model[property];\n              },\n              set: function (value) {\n                model[property] = value;\n              },\n              enumerable: true\n            });\n          });\n          return context;\n        };\n        return model;\n      }\n    };\n  }\n  modelFactory.$inject = ['$interpolate', '$http', '$log', '$location'];\n\n  angular.module('pb.generator.services')\n    .factory('modelFactory', modelFactory);\n})();\n","(function () {\n  'use strict';\n\n  function widgetNameFactory() {\n    var widgetsName = {};\n\n    return {\n      getName: getName\n    };\n\n\n    function getName(widget) {\n      if (!widgetsName.hasOwnProperty(widget)) {\n        widgetsName[widget] = -1;\n      }\n\n      widgetsName[widget] += 1 ;\n\n      return widget + widgetsName[widget];\n    }\n  }\n  angular.module('pb.generator.services')\n    .service('widgetNameFactory', widgetNameFactory);\n})();\n"],"sourceRoot":"/source/"}